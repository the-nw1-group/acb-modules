{"name":"Acb Modules","tagline":"Another-Control-Bus modules for model railways","body":"Another Control Bus\r\n===================\r\n\r\nor Accessory Control Bus - a CBUS like control bus for model railway accessories such as control panels, servos,\r\nsignals and the like. More details on CBUS can be found on the <http://www.merg.org.uk/merg_resources/cbus.php> website.\r\nThese modules should be compatible with CBUS as described in the Developers Guide version 6a to CBUS 4.0 Specification \r\nRevision 8c. The modules only support FLiM (The Full Layout implementation Model)\r\n\r\nThe Modules\r\n-----------\r\n\r\nThe modules are based around either STM32F042 ARM Cortex-M0 microcontroller, or various PIC24/dsPIC33 microcontrollers. \r\nAll of the boards have been designed, with only the ACB-16IO requiring the Gerbers to be drawn. \r\n\r\n| Module     | Microcontroller | Description |\r\n| ---------- | --------------- | ------------------------------------------------------------------------------------- |\r\n| ACB-4TC    | STM32F042K6     | For 4 turnouts, operates 4 servos, 4 relays, and 8 inputs for proving                 |\r\n| ACB-8IOMV  | STM32F042F6     | 8 configuration input or outputs, configurable for various voltages and other options |\r\n| ACB-8IO    | STM32F042F6     | 8 configurable open drain inputs or outputs, 5V tolerant                              |\r\n| ACB-16IO   | STM32F042F6     | 16 configurable open drain inputs or outputs, 5V tolerant                             |\r\n| ACB-16LED  | STM32F042F6     | 16 constant current LED outputs                                                       |\r\n| ACB-MATRIX | STM32F042C6     | 10x7 LED matrix driver                                                                |\r\n| ACB-RF     | STM32F042F6     | Wireless link                                                                         |\r\n| ACB-ETH100 | PIC24HJ128GP504 | CAN to Ethernet bridge                                                                |\r\n| ACB-BRIDGE | PIC24EP512GP806 | CAN to CAN bridge                                                                     |\r\n \r\nMost of the code is written in assembler - yeah I know...  \r\n\r\nBuilding and Debugging\r\n----------------------\r\n\r\nYou'll need the following tools to build the source code:\r\n* Eclipse CDT - I'm using Eclipse Mars Release (4.5.0) Build id: 20150621-1200\r\n* GNU ARM Eclipse plug-in - I'm using version 2.9.1.201508011813 \r\n* Pre-built GNU toolchain from ARM Cortex-M & Cortex-R processors - I'm using version 4.9-2015-q2-update\r\n* OpenOCD - I'm using the one prebuilt by the GNU ARM Eclipse plug-in team\r\n* GNU build tools (for Windows) - again, I'm using the one prebuilt by the GNU ARM Eclipse plug-in team\r\n* Saxon XSLT and XQuery Processor - I'm using version Saxon-HE 9-6-0-6J\r\n\r\nYou might need to add the following 2 substitution strings (Windows > Preferences > Run/Debug > String Substitution),\r\nas I think these are workspace, rather than project settings:\r\n\r\n| Variable        | Value              | Description            |\r\n| --------------- | ------------------ | ---------------------- |\r\n| saxon_xslt_jar  | saxon9he.jar       | Name of Saxon XSTL Jar |\r\n| saxon_xslt_path | *path to JAR file* | Path to Saxon XSLT Jar |\r\n\r\nNote: On Windows systems, in saxon_xslt_path use forward slashes rather than backslashes.\r\n\r\nFor debugging and for burning the boot loader, you need:\r\n* ST-LINK/V2  in-circuit debugger/programmer for STM8 and STM32 - either a stand-alone version, \r\nor from a ST-Discovery board\r\n* STM-32 ST-LINK Utility - I'm using version v3.6.0\r\n\r\nFor programming via the bootloader, you need:\r\n* A CAN to Serial, or CAN to USB convertor, such as MERG's CAN-USB2, 3 or 4. I'm using CAN-USB2. Details can be found\r\non the  <http://www.merg.org.uk/kits.php> website\r\n\r\nI'm using Gitflow, so the most up-to-date version will be on the `develop` branch, rather than on `master`, which\r\nwill only be updated periodically. <http://nvie.com/posts/a-successful-git-branching-model/> has a brilliant description\r\nof working with Gitflow.\r\n\r\nHopefully they should build after a clone from GIT, but if I've missed something, please let me know, and I'll try to \r\ncorrect it. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}